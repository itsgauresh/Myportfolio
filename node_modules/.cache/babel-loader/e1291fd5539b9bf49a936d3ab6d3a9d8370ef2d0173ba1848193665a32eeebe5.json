{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\conne\\\\OneDrive\\\\Desktop\\\\portfolio\\\\src\\\\chatbot\\\\ChatbotUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ChatbotUI.css\"; // You can style it\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://api-inference.huggingface.co/models/gpt2\";\nconst HUGGINGFACE_API_KEY = \"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\"; // replace this\n\nfunction ChatbotUI() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n    try {\n      const res = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${HUGGINGFACE_API_KEY}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          inputs: input\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        setResponse(\"Error: \" + data.error);\n      } else {\n        var _data$;\n        setResponse(((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.generated_text) || \"No response\");\n      }\n    } catch (err) {\n      setResponse(\"Sorry, something went wrong.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCAC AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Ask something...\",\n      rows: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      disabled: loading,\n      children: loading ? \"Thinking...\" : \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-response\",\n      children: response && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"AI:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), \" \", response]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatbotUI, \"IiR1omdg9+dD+OENer1brv9OaRI=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","API_URL","HUGGINGFACE_API_KEY","ChatbotUI","_s","input","setInput","response","setResponse","loading","setLoading","sendMessage","trim","res","fetch","method","headers","Authorization","body","JSON","stringify","inputs","data","json","error","_data$","generated_text","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/conne/OneDrive/Desktop/portfolio/src/chatbot/ChatbotUI.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"./ChatbotUI.css\"; // You can style it\r\n\r\nconst API_URL = \"https://api-inference.huggingface.co/models/gpt2\";\r\nconst HUGGINGFACE_API_KEY = \"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\"; // replace this\r\n\r\nfunction ChatbotUI() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [response, setResponse] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(API_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${HUGGINGFACE_API_KEY}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ inputs: input }),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (data.error) {\r\n        setResponse(\"Error: \" + data.error);\r\n      } else {\r\n        setResponse(data[0]?.generated_text || \"No response\");\r\n      }\r\n    } catch (err) {\r\n      setResponse(\"Sorry, something went wrong.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-box\">\r\n      <h3>ðŸ’¬ AI Chatbot</h3>\r\n      <textarea\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Ask something...\"\r\n        rows={3}\r\n      />\r\n      <button onClick={sendMessage} disabled={loading}>\r\n        {loading ? \"Thinking...\" : \"Send\"}\r\n      </button>\r\n      <div className=\"chatbot-response\">\r\n        {response && <p><strong>AI:</strong> {response}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatbotUI;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}